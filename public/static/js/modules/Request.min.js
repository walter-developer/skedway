import{CSRF_TOKEN}from"./../constants/Constants.js";import Collection from"./../modules/Collection.js";export default class Request{sync=!1;domain=window.location.protocol+"//"+window.location.hostname;headers={"X-CSRF-Token":CSRF_TOKEN,Vary:"Origin",Accept:"application/json","Content-Type":"application/json","X-Requested-With":"XMLHttpRequest","Access-Control-Allow-Origin":URL};credentials="same-origin";url(url){let self=this;return this.domain=url,this}sync(sync=!0){let self=this;return this.sync=sync,this}get(uri,params={}){let self=this;return self.sync?self.getSync(uri,params):self.getAsync(uri,params)}header(headers={}){let self=this;return this.headers={...this.headers,...headers},this}post(uri,params={}){let self=this;return self.sync?self.postSync(uri,params):self.postAsync(uri,params)}put(uri,params={}){let self=this;return self.sync?self.putSync(uri,params):self.putAsync(uri,params)}delete(uri,params={}){let self=this;return self.sync?self.deleteSync(uri,params):self.deleteAsync(uri,params)}getSync(uri,params={}){let self=this;const queryString=this.objToQueryString(params);let url=this.domain+uri+"?"+queryString;return this.fetchSync("GET",url,params)}postSync(uri,params={}){let self=this,url=this.domain+uri;return this.fetchSync("POST",url,params)}putSync(uri,params={}){let self=this,url=this.domain+uri;return this.fetchSync("PUT",url,params)}deleteSync(uri,params={}){let self=this;const queryString=this.objToQueryString(params);let url=this.domain+uri+"?"+queryString;return this.fetchSync("DELETE",url,params)}getAsync(uri,params={}){let self=this;const queryString=this.objToQueryString(params);let url=this.domain+uri+"?"+queryString;return this.fetchAsync("GET",url,params)}postAsync(uri,params={}){let self=this,url=this.domain+uri;return this.fetchAsync("POST",url,params)}putAsync(uri,params={}){let self=this,url=this.domain+uri;return this.fetchAsync("PUT",url,params)}deleteAsync(uri,params={}){let self=this;const queryString=this.objToQueryString(params);let url=this.domain+uri+"?"+queryString;return this.fetchAsync("DELETE",url,params)}objToQueryString(obj){let keyValuePairs=[];for(const key in obj)keyValuePairs.push(encodeURIComponent(key)+"="+encodeURIComponent(obj[key]));return keyValuePairs.join("&")}serialize(form){let self=this,help=this.help();return form&&form instanceof Object&&form instanceof FormData==!1?help.serializeFile(help.associative(form)):form&&form instanceof Object&&form instanceof FormData==!0?help.serializeFile(help.associative(help.serialize(form))):{}}async fetchAsync(method="GET",url,params={}){let self=this,response;return fetch(url,{headers:this.headers,method:method,credentials:this.credentials,body:JSON.stringify(this.serialize(params))}).then(http=>{let response=http.json().then(json=>(http.decode=()=>json,http)).catch(()=>(http.decode=()=>({}),http));return Promise.resolve(response)}).then(http=>(http.collection=()=>new Collection(http.decode()),Promise.resolve(http))).then(http=>http&&(http.ok||http.status>=200&&http.status<=299)?Promise.resolve(http):Promise.reject(http))}fetchSync(method="GET",url,params={}){let self=this,request=new XMLHttpRequest,response={request:()=>request,status:()=>request.status,ok:()=>200===parseInt(request.status),data:()=>response.request().responseText,body:()=>response.request().responseText,header:header=>response.request().getResponseHeader(header),headers:()=>response.request().getAllResponseHeaders().split(/\n|\r/).filter(h=>h.length>0),json:()=>JSON.parse(response.request().responseText.length?response.request().responseText:"{}"),error:callback=>response.request().status<200||response.request().status>299?callback(response.request()):null,success:callback=>response.request().status>=200&&response.request().status<=299?callback(response.request()):null,message:()=>response.request().getResponseHeader("app-message")?response.request().getResponseHeader("app-message"):request.statusText,messages:()=>response.request().getResponseHeader("app-messages")?response.request().getResponseHeader("app-messages").split(/\n|\r|\,/):[request.statusText]};request.open(method,url,!1),request.withCredentials=!0;for(const headerKey in self.headers)request.setRequestHeader(headerKey,self.headers[headerKey]);return request.send(JSON.stringify(self.serialize(params))),response.request=()=>request,response}help(){let help;return{set:function(object={},key,value){let self=this,keys=key.split(".").filter(n=>n),first=keys.shift(),next=null;return object=object&&object instanceof Object?object:{},first.length&&0==keys.length?(object[first]=value,object):first.length&&keys.length>0?(next=Object.keys(object).includes(first)?object[first]:{},next=next&&next instanceof Object?next:{},object[first]=self.set(next,keys.join("."),value),object):object},serialize:function(formData){let form={},keys=[];return formData.forEach((function(value,key){return keys=Object.keys(form),keys.includes(key)?(form[key]=Array.isArray(form[key])?form[key]:[form[key]],form[key].push(value),form):(form[key]=value,form)})),form},associative:function(data){let self=this,json={},index=null;for(let key in data)index=key.split(/\[|\]/g).filter(n=>n).join("."),json=self.set(json,index,data[key]);return json},serializeFile:function(data){let self=this,file={},exists=!1;if(data&&data instanceof Object&&data instanceof File==!1){for(const key in data)data[key]&&data[key]instanceof Object&&(data[key]=self.serializeFile(data[key]));return data}return data&&data instanceof Object&&data instanceof File==!0?(file={name:data.name,size:data.size,type:data.type,mime:data.type,date:data.lastModifiedDate,timestamp:data.lastModified,extension:data.type.split(/\\|\//).pop(),base64:self.serializeFileBase64(data)},exists=file.name.toString().trim().length,exists?file:null):data},serializeFileBase64:function(file){let returnText="",url=URL.createObjectURL(file),xhr=new XMLHttpRequest;xhr.open("GET",url,!1),xhr.overrideMimeType("text/plain; charset=x-user-defined"),xhr.send(),URL.revokeObjectURL(url);for(let i=0;i<xhr.responseText.length;i++)returnText+=String.fromCharCode(255&xhr.responseText.charCodeAt(i));return returnText&&returnText.length?"data:"+file.type+";base64,"+btoa(returnText):null}}}}